#!/usr/bin/env node

var imapper = require("../lib/server"),
    packageData = require("../package"),
    fs = require("fs"),
    argv = require('optimist').argv,
    simplesmtp = require("simplesmtp"),

    configLocation = argv.config || process.env.IMAP_CONFIG,
    storageLocation = argv.storage || process.env.IMAP_STORAGE,
    port = argv.port || argv.p || process.env.IMAP_PORT,

    smtpPort = argv.smtpPort || process.env.IMAP_SMTPPORT,

    pluginsList = [].concat.apply([], [].concat(argv.plugin || process.env.IMAP_PLUGINS || []).map(function(plugin){
        return (plugin || "").toUpperCase().trim().split(/\s*,\s*/);
    })),

    secure = (argv.ssl || argv.s || process.env.IMAP_SSL || "").toString().trim().toLowerCase() === "true",

    debug = (argv.debug || argv.d || process.env.IMAP_DEBUG || "").toString().trim().toLowerCase() === "true",

    config = {},
		storageData = null;

if(configLocation){
    config = JSON.parse(fs.readFileSync(configLocation, "utf-8"));
}

config.storage = require('imapper-storage-memory');

if(storageLocation){
    storageData = JSON.parse(fs.readFileSync(storageLocation, "utf-8"));
}

if(pluginsList && pluginsList.length){
    config.plugins = pluginsList;
}

if(secure){
    config.ssl = true;
}

if(debug){
    config.debug = true;
}

port = port || config.port;

if(!port){
    if(secure){
        port = 993;
    }else{
        port = 143;
    }
}

if(argv.h || argv.help){

    var help = fs.readFileSync(__dirname + "/help.txt", "utf-8"),
        list = fs.readdirSync(__dirname + "/../lib/plugins", "utf-8"),
        plugins = [],
        maxKey = 0,
        pluginText = [];

    list.forEach(function(plugin){
        var text = [], file;

        file = fs.readFileSync(__dirname + "/../lib/plugins/" + plugin, "utf-8");

        plugin = plugin.replace(/\.js$/gi, "").toUpperCase();

        file.replace(/@help (.*)/gim, function(o, help){
            text.push(help);
        });

        if(plugin.length > maxKey){
            maxKey = plugin.length;
        }

        plugins.push({key: plugin, value: text});
    });

    plugins.forEach(function(plugin){
        var indent = maxKey + 2;
        pluginText.push(" " + plugin.key + (new Array(indent - plugin.key.length).join(" "))+ (plugin.value && plugin.value[0] || ""));
        if(plugin.value){
            for(var j = 1; j<plugin.value.length; j++){
                pluginText.push((new Array(indent + 1).join(" "))+ plugin.value[j]);
            }
        }
    });

    console.log(help.
        replace(/__PLUGINS__/g, pluginText.join("\n")).
        replace(/__VERSION__/g, packageData.version).
        replace(/__VBAR__/g, new Array(packageData.version.length + 1).join("=")).
        trim()
        );

}else{
    var server = imapper(config);
		if (storageData) {
	    config.storage.load(storageData);
		}
    console.log("Starting Imapper ...");
    server.listen(port, function(){
        console.log("Imapper successfully%s listening on port %s", secure ? " and securely" : "", port);
    });

    if(smtpPort){
        simplesmtp.createSimpleServer({SMTPBanner:"Imapper"}, function(req){
            var data = [], dataLen = 0;
            req.on("data", function(chunk){
                if(!chunk || !chunk.length){
                    return;
                }
                data.push(chunk);
                dataLen += chunk.length;
            });
            req.on("end", function(){
                var message = Buffer.concat(data, dataLen);
                server.createMessage("INBOX", message.toString("binary"),function(){});
            });
            req.accept();
        }).listen(smtpPort, function(){
            console.log("Incoming SMTP server up and running on port %s", smtpPort);
        });
    }
}

